#pragma kernel March
#include "/Include/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    float4 vertexC;
    float4 colorC;
    float2 uvC;

    float4 vertexB;
    float4 colorB;
    float2 uvB;

    float4 vertexA;
    float4 colorA;
    float2 uvA;

    float3 normal;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<float4> points;
StructuredBuffer<float4> colores;
StructuredBuffer<float> iluminaciones;

float isoLevel;
int3 numPointsPerAxis;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

float4 elegirColores(float v1, float4 color1, float v2, float4 color2)
{
    return color1 + (v2 > v1) * (color2 - color1);
}

float elegirLuz(float v1, float luz1, float v2, float luz2)
{
    return luz1 + (v2 > v1) * (luz2 - luz1);
}

int indexEnPunto(int x, int y, int z)
{
    return z * numPointsPerAxis.x * numPointsPerAxis.y + y * numPointsPerAxis.x + x;
}

float4 valorEnPunto(int x, int y, int z)
{
    return points[indexEnPunto(x, y, z)];
}

float4 colorEnPunto(int x, int y, int z)
{
    return colores[indexEnPunto(x, y, z)];
}

float invLerp(float from, float to, float value)
{
    return (value - from) / (to - from);
}

float luzEnPunto(int x, int y, int z)
{
    return invLerp(0, 15, iluminaciones[indexEnPunto(x, y, z)]);
}

bool coloresIguales(float4 color1, float4 color2)
{
    for (int i = 0; i < 4; i++)
        if (color1[i] != color2[i])
            return false;
    return true;
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID)
{
    for (int pos = 0; pos < 3; pos++)
        if (id[pos] >= numPointsPerAxis[pos] - 1)
            return;

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        valorEnPunto(id.x, id.y, id.z),
        valorEnPunto(id.x + 1, id.y, id.z),
        valorEnPunto(id.x + 1, id.y, id.z + 1),
        valorEnPunto(id.x, id.y, id.z + 1),
        valorEnPunto(id.x, id.y + 1, id.z),
        valorEnPunto(id.x + 1, id.y + 1, id.z),
        valorEnPunto(id.x + 1, id.y + 1, id.z + 1),
        valorEnPunto(id.x, id.y + 1, id.z + 1)
    };

    float4 cubeCornersColores[8] = {
        colorEnPunto(id.x, id.y, id.z),
        colorEnPunto(id.x + 1, id.y, id.z),
        colorEnPunto(id.x + 1, id.y, id.z + 1),
        colorEnPunto(id.x, id.y, id.z + 1),
        colorEnPunto(id.x, id.y + 1, id.z),
        colorEnPunto(id.x + 1, id.y + 1, id.z),
        colorEnPunto(id.x + 1, id.y + 1, id.z + 1),
        colorEnPunto(id.x, id.y + 1, id.z + 1)
    };

    float cubeCornersLuz[8] = {
        luzEnPunto(id.x, id.y, id.z),
        luzEnPunto(id.x + 1, id.y, id.z),
        luzEnPunto(id.x + 1, id.y, id.z + 1),
        luzEnPunto(id.x, id.y, id.z + 1),
        luzEnPunto(id.x, id.y + 1, id.z),
        luzEnPunto(id.x + 1, id.y + 1, id.z),
        luzEnPunto(id.x + 1, id.y + 1, id.z + 1),
        luzEnPunto(id.x, id.y + 1, id.z + 1)
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        Triangle tri;

        for (int j = 0; j < 3; j++)
        {
            int a = cornerIndexAFromEdge[triangulation[cubeIndex][i + j]];
            int b = cornerIndexBFromEdge[triangulation[cubeIndex][i + j]];

            float3 posicion = interpolateVerts(cubeCorners[a], cubeCorners[b]);
            float4 color = elegirColores(cubeCorners[a].w, cubeCornersColores[a], cubeCorners[b].w, cubeCornersColores[b]);
            float iluminacion = elegirLuz(cubeCorners[a].w, cubeCornersLuz[a], cubeCorners[b].w, cubeCornersLuz[b]);

            if (j == 0)
            {
                tri.vertexA = float4(posicion, iluminacion);
                tri.colorA = color;
                tri.uvA = float2(0, 0);
            }
            else if (j == 1)
            {
                tri.vertexB = float4(posicion, iluminacion);
                tri.colorB = color;
                tri.uvB = float2(0, 1);
            }
            else
            {
                tri.vertexC = float4(posicion, iluminacion);
                tri.colorC = color;
                tri.uvC = float2(1, 0);
            }
        }



        tri.normal = -normalize(cross(tri.vertexB - tri.vertexA, tri.vertexC - tri.vertexA));

        triangles.Append(tri);
    }
}

/*int3 igualdadDeColores(float4 color1, float4 color2, float4 color3)
{
    color1 = floor(color1 * 50);
    color2 = floor(color2 * 50);
    color3 = floor(color3 * 50);

    int3 resultado;

    resultado.x = (coloresIguales(color1, color2)) ? 0 : 1;
    resultado.y = (coloresIguales(color1, color3)) ? 0 : 1;
    resultado.z = (coloresIguales(color2, color3)) ? 0 : 1;

    return resultado;
}*/

/*
float4 color1 = floor(tri.colorA * 50);
float4 color2 = floor(tri.colorB * 50);
float4 color3 = floor(tri.colorC * 50);

int3 igualdades;

igualdades.x = (coloresIguales(color1, color2)) ? 0 : 1;
igualdades.y = (coloresIguales(color1, color3)) ? 0 : 1;
igualdades.z = (coloresIguales(color2, color3)) ? 0 : 1;
int uvIndex = 0;
if (igualdades.x) uvIndex |= 1;
if (igualdades.y) uvIndex |= 2;
if (igualdades.z) uvIndex |= 4;

tri.uvA = float2(0, 0);
if (igualdades.x == 0)
    tri.uvB = float2(0, 0);
else
    tri.uvB = float2(1, 0);
tri.uvC = float2(0, 1);*/
/*
static const int uvCoords[8][4] = {
    {0, 0, 0, 0},
    {1, 1, 1, 1},
    {1, 1, 0, 0},
    {-1, -1, -1, -1}, // no es un caso valido
    {0, 0, 1, 1},
    {-1, -1, -1, -1}, // no es un caso valido
    {-1, -1, -1, -1}, // no es un caso valido
    {1, 0, 0, 1}
};*/


